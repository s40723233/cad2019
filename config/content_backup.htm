<h1>Home</h1>
<p><a href="https://s40723233.github.io/cad2019/content/week%202~5.html">week2~5</a></p>
<p><a href="https://s40723233.github.io/cad2019/content/week%206~9.html">week6~9</a></p>
<p><a href="https://s40723233.github.io/cad2019/content/Week10~14.html">week10~14</a></p>
<p><a href="https://s40723233.github.io/cad2019/content/Week15~18.html">week15~18</a></p>
<h1>Weeks</h1>
<h2>week 2~5</h2>
<p>建立自己的倉儲和cad2019網站</p>
<p><span>並下載子cmsimde建立新的網頁。</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yiq7M-uNuU4" width="560"></iframe></span></p>
<p>week 3</p>
<p>執行編譯 Solvespace</p>
<h4>編譯步驟:</h4>
<p>先將 Y:\portablegit\bin\sh.exe 改名為 sh_rename_for_solvespace.exe</p>
<p>git version 查驗 git 版本</p>
<p>git 2.13 版本以上, 可以使用下列 git clone <span>--recurse-submodules 取得所有子模組資料</span></p>
<p>git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace</p>
<p>edit Y:\tmp\solvespace\extlib\angle\CMakeLists.txt comment out line 713 and 714</p>
<p>#list(APPEND ANGLE_DEFINITIONS<br/>#"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }")<br/>endif()</p>
<p>需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中:</p>
<p>cd solvespace</p>
<p>cd extlib</p>
<p>cd libpng</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p>rename libpng.dll.a to libpng_static.a and copy to Y:\msys64\mingw64\lib</p>
<p>接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行:</p>
<p><span>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</span><br/><span>mingw32-make</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Rjy6DkNjKmM" width="560"></iframe></span></p>
<p></p>
<p><span></span></p>
<h5>week4</h5>
<p>完成WEEK3的倉儲設定以及網站。</p>
<h5>week5</h5>
<p>solvespace建立模型。</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1Ce2b3yKXD8" width="560"></iframe></p>
<p>自評成績，</p>
<p></p>
<h2>week 6~9</h2>
<p></p>
<h5>week 6</h5>
<p>建立汽車模型</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RfHPYscVAew" width="560"></iframe></p>
<p>使用v-rap控制模型</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WuxXDeClLB0" width="560"></iframe></p>
<h4>week7</h4>
<p>網際 V-rep 模型控制</p>
<ol>
<li>先到Task1裡，下載V-rep 3.6.1 rev 4.7z和 web_vrep2.zip。</li>
<li>將兩個檔案都解壓縮在自己的隨身碟tmp裡面。</li>
<li>打開自己的start_mdecourse，輸入regedit開啟程式。</li>
<li>將HKEY_CLASSES_ROOT內的，.py和.py_auto_le刪除。</li>
<li>開啟web_vrep2的app.py，點Tools的Go。</li>
<li>再點開剛剛載好的V-REP3\V-REP_PRO_EDU &gt; vrep.exe 。</li>
<li>開啟後將web_vrep2的two_wheeler.ttt拖移進去。</li>
<li>到http://127.0.0.1:5000/裡面，就可以操控了。</li>
</ol>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0Z_kFuPI0NY" width="560"></iframe></p>
<p>與互相評分。</p>
<p>新增啟動與停止按鈕</p>
<p>1.進入2b Task 1的 #14 ，準備操作。</p>
<p>2.開啟start_mdecoursr，進入web_vrep2。</p>
<p>3.編輯templates裡面的controls.html。</p>
<p>4.加入start 和 stop 的botton，直接複製改。</p>
<p>5.編輯vrep_linefollower.py，if加入判斷式。 if direction == 'start': vrep.simxStartSimulation(self.clientID, vrep.simx_opmode_oneshot) if direction == 'stop': vrep.simxStopSimulation(self.clientID, vrep.simx_opmode_oneshot)</p>
<p>6.補上else: ，完成後儲存，記得語法要排好。</p>
<p>7.開啟v-rep程式，將two_wheeler.ttt檔案拖入。</p>
<p>8.再開啟app.py 的go進入網址localhost:5000。</p>
<p>9.這樣子就可以進行start 以及 stop的操作了。</p>
<p></p>
<p>Solvespace 納入學號</p>
<p>1.先到自己tmp下的solvespace\build\src\CMakeFiles\solvespace.dir。</p>
<p>2.刪掉solvespace.cpp.obj檔案，開啟start_mdecourse。</p>
<p>3.再到solvespace\src找到solvespace.cpp用編輯器打開。</p>
<p>4.Ctrl+f 搜尋GPL，把Message下面的This is SolveSpace 。</p>
<p>5.改成This is SolveSpace is compiled by 40723210。</p>
<p>6.進入solvespace\build，輸入mingw32-make，等待完成。</p>
<p>7.開啟solvespace.exe，點help &gt; about 就完成了驗證。</p>
<h2>Week10~14</h2>
<p>各組開始協同倉儲</p>
<p>Batch Command設定</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qKlIqdLnLvk" width="560"></iframe></p>
<h2>Week15~18</h2>
<h1>BOOK</h1>
<h2>Space Modeling with SolidWorks and NX</h2>
<p><span>第6章-裝配建模</span></p>
<p><span>每天，我們都會看到許多將組件組裝成一個模型的示例，例如自行車，汽車和計算機。所有這些產品都是通過設計和製造單個零件，然後將它們裝配在一起而創建的。創建它們的設計師必須仔細計劃每個零件，以便它們都能完美地配合在一起以執行所需的功能。在本章中，您將學習在裝配體建模中使用的兩種方法。我們將以葉輪組件為例進行組件建模。該程序集的某些部分已經在較早的章節中進行了建模。 NX 12 Assembly是包含各個零件的零件文件。它們以這樣的方式添加到零件文件中，即零件實際上位於裝配體中並鏈接到原始零件。這樣就無需為計算機中的各個部件創建單獨的存儲空間。所有零件都是可選的，可在設計過程中用於信息和配合，以確保設計者想要的完美配合。下圖顯示瞭如何添加零部件以構成裝配體。</span></p>
<p><span><img alt="" height="156" src="/images/1.jpg" width="358"/></span></p>
<p><span>6.1術語裝配</span></p>
<p><span>裝配是指向零件和/或子裝配的指針的集合。裝配體是零件文件，其中包含零部件對象。零部件對象零部件對像是指向包含零部件幾何形狀的零件文件的非幾何指針。零部件對象存儲信息，例如圖層，顏色，參考集，零部件相對於文件系統中零部件的裝配體和路徑的位置數據。 NX 12用於工程設計123密蘇里科技大學零件零件是零件的一個零件文件，該零件在裝配體中指向。實際的幾何圖形存儲在零部件中，並且被引用，而不是由裝配體複製。零部件的出現零部件的出現是指向零部件文件中幾何圖形的指針。使用零部件實例來創建一個或多個零部件參考，而無需創建其他幾何體。參考集參考集是零部件或子裝配中的對象的命名集合，可用於簡化高層裝配中零部件的表示。</span></p>
<p><span><img alt="" height="134" src="/images/2.jpg" width="276"/></span></p>
<p><span>6.2組裝方法創建任何組裝模型的基本方法有兩種。 </span></p>
<p><span>•自上而下的方法</span></p>
<p><span>•自下而上的方法</span></p>
<p><span>6.2.1自上而下的方法</span></p>
<p><span>在此方法中，首先創建裝配零件文件，然後在該文件中創建零部件。然後對各個零件進行建模。這種類型的建模在新設計中很有用。</span></p>
<p><span><img alt="" height="501" src="/images/3.jpg" width="380"/></span></p>
<p><span>6.2.2自下而上的方法</span></p>
<p><span>首先以傳統方式創建零部件，然後將其添加到裝配零件文件中。當零件文件已經存在於先前的設計中並且可以重複使用時，此技術特別有用。</span></p>
<p><span>6.2.3混合和匹配</span></p>
<p><span>可以在必要時將這兩種方法結合使用，以增加裝配設計需求的靈活性。 6.3裝配和約束導航器裝配導航器和約束導航器位於屏幕左側資源欄中零件導航器的頂部。這些導航器向您顯示構成裝配體的各種內容，包括零件層次結構，零件名稱，有關零件的信息，例如零件是否為只讀，對像數以及約束狀態。</span></p>
<p><span> 6.4匹配約束</span></p>
<p><span>將零部件對象添加到裝配零件文件後，每個零部件對像都將與現有對象配對。通過在裝配的零部件上分配配合條件，可以在這些零部件之間建立位置關係或約束。這些關係稱為配合約束。配合條件由一個或多個配合約束組成。有不同的配合約束，如下所述：</span></p>
<p><span><img alt="" height="36" src="/images/5.jpg" width="33"/>觸摸/對齊：選擇進行對齊的平面對象將是共面的，但是平面的法線將指向相同的方向。圓柱對象的中心線將彼此對齊。</span></p>
<p><span><img alt="" height="25" src="/images/6.jpg" width="25"/>同心：約束兩個分量的圓形或橢圓形邊緣，以使中心重合，並且邊緣的平面共面。</span></p>
<p><span><img alt="" height="29" src="/images/7.jpg" width="29"/>距離：這將在兩個對象之間建立一個+/-距離（偏移）值。</span></p>
<p><span><img alt="" height="31" src="/images/8.jpg" width="28"/>平行：所選對象將彼此平行。</span></p>
<p><span><img alt="" height="24" src="/images/9.jpg" width="31"/>垂直：所選對象將彼此垂直。</span></p>
<p><span>鍵合：創建焊接並將零件焊接在一起以作為單個對象移動。</span></p>
<p><span>居中：對象將在其他對象之間居中，即沿槽定位圓柱並將圓柱在槽中居中。</span></p>
<p><span>角度：這將在要組裝的零部件上選擇的兩個對象實體之間固定一個恆定的角度</span></p>
<p><span>6.5示例</span></p>
<p><span>我們將組裝葉輪組件對象。您已經在前面的章節中對所有組件進行了建模。現在，我們必須將它們插入到組裝環境中，並應用約束以使它們相對於彼此定位。組裝完成後，我們可以創建分解圖並準備工程圖。在開始裝配建模之前，請在Hexabolt的葉輪下部殼體和葉輪上部殼體的每一側上分別製造三個通孔（每個殼體總共6個孔）。孔的直徑應為0.25，其位置應與下圖相似。確保下部和上部機殼在相同的位置上打孔，以便在組裝時匹配。</span></p>
<p><span><img alt="" height="199" src="/images/1575569597083.jpg" width="342"/></span></p>
<p><span>6.5.1開始裝配</span></p>
<p><span>➢創建新文件</span></p>
<p><span>➢在“模型”選項卡下選擇“裝配”</span></p>
<p><span>➢將單位設置為英寸</span></p>
<p><span>➢將其命名為Impeller_assembly.prt</span></p>
<p><span><img alt="" height="561" src="/images/13.jpg" width="713"/></span></p>
<p><span>或者，如果您在建模應用程序中並想開始組裝，則</span></p>
<p><span>➢在“應用程序”選項卡中打開“組裝”選項，然後會出現一個新的“組裝”選項卡</span></p>
<p><span>0<img alt="" height="111" src="/images/14.jpg" width="554"/></span></p>
<p><span>➢單擊文件→程序集，如下所示</span></p>
<p><span>0<img alt="" height="563" src="/images/15.jpg" width="599"/></span></p>
<p><span>在“組件”選項中，</span></p>
<p><span>•“添加”選項將添加其零件文件已創建的新組件對象。 </span></p>
<p><span>•“新建”使您可以在使用自頂向下的裝配方法時在裝配文件中創建新的零部件幾何。裝配約束允許您創建裝配約束，而“移動零部件”則允許您將零部件重新放置在裝配中所需的位置。</span></p>
<p><span>0<img alt="" height="91" src="/images/16.jpg" width="776"/></span></p>
<p><span>6.5.2添加組件和約束</span></p>
<p><span>➢選擇添加將彈出右側所示的對話框。您可以從現有文件中選擇零件文件（應該已經在“已加載零件”選項卡中顯示），也可以使用對話框中的“打開文件”選項來加載零件文件。這會將選定的零件文件加載到“加載的零件”對話框中。 </span></p>
<p><span>➢單擊“打開”圖標，然後選擇文件Impeller_upper-casing.prt。</span></p>
<p><span>➢在“零件名稱”對話框中單擊“確定”。然後，我們需要設置一個位置來放置第一個零部件的坐標系。在“位置”組框中，保留“裝配位置”的默認“捕捉”選項。</span></p>
<p><span> ➢單擊選擇對象現在，您應該能夠以透明模式查看零件，如右側圖所示。</span></p>
<p><span> ➢單擊“點對話框”圖標並創建[0，0，0]的坐標。</span></p>
<p><span>➢單擊“確定”退出“點對話框”。注意：可以隨意使用“循環方向”選項來設置不同的方向。 </span></p>
<p><span>➢在“放置”組框中，我們可以定義該組件的放置位置和放置方式。在這種情況下，我們會將選項保留為默認值。</span></p>
<p><span> ➢單擊“確定”退出“添加組件”對話框。然後，您將看到一個彈出對話框，如下圖所示。</span></p>
<p><span>0<img alt="" height="196" src="/images/18.jpg" width="464"/></span></p>
<p><span>➢單擊“是”為該零件創建一個“修復”約束。現在您所擁有的應該如下圖所示。</span></p>
<p><span>讓我們繼續添加第二個組件，即下部外殼。</span></p>
<p><span>0<img alt="" height="264" src="/images/19.jpg" width="401"/></span></p>
<p><span>➢單擊裝配部分中的添加➢從“零件”或“打開”中選擇文件Impeller_lower-casing.prt➢在“位置”組框中，將選項更改為“絕對–工件”以將新零件放置在當前工件的絕對原點處零件</span></p>
<p><span>➢在“放置”組框中，首先切換“移動”單選按鈕，然後將下殼體移離上殼體，以留出足夠的空間來選擇配合面。您將擁有的內容應該類似於下圖。</span></p>
<p><span>0<img alt="" height="351" src="/images/20.jpg" width="375"/></span></p>
<p><span>➢然後，切換約束單選按鈕。現在，讓我們配對上殼體和下殼體。您可以在“約束類型”框中的下拉菜單中訪問所有約束。在這裡，您可以看到不同的配合類型，這在上一節中已進行了說明。 </span></p>
<p><span>➢確保在“類型”對話框中選擇了“觸摸對齊”圖標。</span></p>
<p><span>➢首先，選擇箭頭指向的面，如左圖所示。</span></p>
<p><span> ➢如右圖所示，在屏幕上單擊上殼體的表面。</span></p>
<p><span>0<img alt="" height="296" src="/images/1a.jpg" width="639"/></span></p>
<p><span>您可能必須調整視圖才能選擇面。選擇這兩個面後，將自動添加“觸摸對齊”約束。讓我們添加另一個“觸摸對齊”約束。 </span></p>
<p><span>➢單擊上套管的法蘭➢單擊下套管的法蘭，您可能需要通過單擊“反”來反轉約束方向</span></p>
<p><span>0<img alt="" height="328" src="/images/1b.jpg" width="598"/></span></p>
<p><span><img alt="" height="366" src="/images/1c.jpg" width="446"/></span></p>
<p><span>下殼體相對於上殼體受到約束。現在讓我們添加葉輪。 </span></p>
<p><span>➢選擇裝配體→零部件→添加以將零部件添加到當前裝配體中</span></p>
<p><span>➢打開文件Impeller_impeller.prt</span></p>
<p><span>➢在對話框中單擊確定➢選擇絕對–裝配體位置的工作零件</span></p>
<p><span>0</span></p>
<div id="translation">
<div class="gtx-body">➢切換“約束”按鈕➢單擊“約束類型”框中的“距離”圖標➢選擇兩個面，首先在葉輪上，然後在殼體上，如下圖所示</div>
<div class="gtx-body"></div>
</div>
<div id="buttons">0</div>
<p><span>➢在“放置”組的“距離”框中，輸入3的值。</span></p>
<p><span>➢按Enter預覽當前組件。預覽可能會顯示葉輪的方向與我們想要的方向相反。</span></p>
<p><span>0</span></p>
<p><span>➢要更改零件的方向或距離方向，請在“放置”窗口中，單擊“幾何要約束”框中的“循環最後約束”按鈕，如下所示</span></p>
<p><span>0</span></p>
<p><span></span></p>
<h2>NX-12-for-Engineering-Design</h2>
<p><span style="background-color: #800000; color: #ffff99;">1 引言:</span><span>通過特徵形狀和特徵的示例來展示特定知識。每個特徵形狀都有一個簡短的介紹，然後介紹該特徵在製造過程中的用途。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">2 技術寫意素描</span>:<span>通常通過手繪草圖來概述基本思想和概念。使用技術圖紙，符號和字符的標準，對於任何熟悉國際技術語言的人來說，這樣的草圖都變得清晰。為了避免技術系統或產品的外觀出現問題，至關重要的是要考慮到技術圖紙（即計劃）所必需的所有標準。唯一的區別在於以下事實：在計劃中，所有內容都被精確繪製（包括書寫），而草圖的準確性取決於其作者及其才華的準確性。在生活中，人才可以得到發展，但沒有工作就不能發展。但是，知識可以通過學習來獲得。日常工作是通過工作建立的，類似於適應運動。專業的設計師和工程師精通素描技術，這是有道理的。但是，通常它們的素描能力接近完美。素描使他們能夠將來自大腦形而上學部分的抽象信息作為自己和他人的文檔進行交流。還可以使用草圖，以便能夠以圖形形式快速呈現與特定問題有關的想法。草繪顯著改善了團隊成員，起草者和客戶之間的溝通。</span></p>
<p></p>
<p><span style="background-color: #800000; color: #ffff99;">3 3D建模</span>從歷史上看，開發是逐步發展的，從簡單地使用線框模型描述對象和3D模型的表面描述到實體模型，這是描述空間中真實模型的最可靠方法</p>
<p><span style="background-color: #800000; color: #ffff99;">4 3D建模軟件包</span><span style="color: #ffff99;"><span style="color: #000000;">本書介紹了在通信方面有所不同的兩個建模者。每個用戶都有自己的目的和信息。用戶應該能夠識別其適用性以及是否在不同的使用級別上使用一個或另一個。我們應該強調，通信技術仍然是一個研究不足的領域，這意味著很難對一種方法或其他方法的優點做出可靠的判斷。</span></span></p>
<p><span style="background-color: #800000; color: #ffff99;">5 擠壓</span><span style="color: #000000;">擠塑的例子很多，例如軋製，型材的生產或建築中使用的鋼樑，框架和桁架。擠出也常用於形成板，輪，型材和各種平面塊。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">6 旋轉</span><span style="color: #000000;">軸對稱零件通常是通過車削，旋轉磨削，鑽孔，銑削等製成的。在這些方法中，切削點通常圍繞一個軸旋轉。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">7 掃出<span>曲線</span></span><span style="color: #000000;">掃描代表一種重要的通用形式，用於定義不同橫截面的空間形狀，並沿預定曲線變化。此功能對於創建管道和其他自由形式的線性輪廓特別有用。它適用於不同的示例，例如彈簧或照明設備，證明了其普遍適用性。複雜形狀的示例顯示了在不同行業領域中的可能應用。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">8 製造技術與用途</span><span style="color: #000000;">沿曲線在不同橫截面上的過渡對於定義螺旋形狀（即通常為水力形狀）很重 要。在本章中，專門定義了液壓機，氣動鼓風機，進 氣歧管，低壓鼓風機等典型 的螺旋形殼體的形狀。 這些示例顯示了特殊影響的證據，連續橫截面的定義不 明確等。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">9 補充形狀</span><span style="color: #000000;">由倒角，邊緣融合和可擠壓表面定義的特殊細部形狀是任何細部設計的關鍵部分。對於前面各章中涉及的所有形狀，將介紹在不同的模型和技術上使用補充形狀的情況。本章包括所呈現功能的細節，這些特徵對於頂層設計，特別是對於創建非實體產品的照片非常重要。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">10 焊接建築</span><span style="color: #000000;">焊接產品是一種特殊的設計案例。儘管前幾章中的功能專門用於軋製，壓鑄和塑料材料的注射，但是焊接對於承重結構很重要。這就是為什麼這些特徵可以真實呈現焊接細節的原因，這些細節定義了待焊接材料的體積</span></p>
<p><span style="background-color: #800000; color: #ffff99;">11 鈑金彎曲</span><span style="color: #000000;">因為由於具有高度的可重複性，並且在功能上相對便宜，因此，當今的鈑 金產品在使用方面具有明顯的優勢。除了邊緣和折疊 細節之外，鈑金產品還需 要一些重要的細節來定義展開的鈑金。在本章中，請注意在使用自動默認設置 （彎曲半徑和其他材料（彈性模 塊 E））時用戶應注意的細節。預先定義了兩種 用於定義鈑金零件的方法：（1）來自蓋子或（2）來自固體材料。</span><span style="color: #ffff99;"> </span></p>
<p><span style="background-color: #800000; color: #ffff99;">12 物理模型建模和參數化</span><span style="color: #000000;">本章考慮兩種類型的動作。在第一部分中，對於構造函數而言，重要的是要由他或她自己實際確定零件的尺寸。我們介紹最簡單的尺寸標註方法和使用激光的方法。無論如何，在標註尺寸後，構造函數需要生成2D或3D草圖。這由構造函數決定</span></p>
<p><span style="background-color: #800000; color: #ffff99;">13 個程序集</span><span style="color: #ffff99;"><span style="color: #000000;">。它由技術報告，研究，材料規格，設置製造過程以及相應的運輸，運輸，分配，售後服務，維修和使用後產品處置的文檔組成。</span></span></p>
<p><span style="background-color: #800000; color: #ffff99;">14 技術文檔（圖紙）</span><span style="color: #000000;">技術文檔是使用多種熟悉的技術製造的產品的工程說明中的重要組成部分。它代表了產品的所有細節的圖形和描述性表示。空間中的對像以裝配圖或普通圖的形式顯示為圖形表示，而細節在製造圖中指定。</span></p>
<p><span style="background-color: #800000; color: #ffff99;">15 建模者和技術文檔</span><span style="color: #ffff99;"><span style="color: #000000;">本章介紹了製作 特定細節的圖紙的能力和偏差，這些細節顯著地限定了特定建模者的質量。由 於開發階段的差異，仍然有一些 關鍵信息和消息可以使計劃符合條件，但不幸 的是它們尚未包含在標準軟件中。如果將來的發展包括將技術文檔的國際標準 納入建模人 員，那麼它不僅會簡化，而且最重要的是會提高總體技術文化。</span></span></p>
<p><span></span></p>
<p></p>
<h2>cad_history</h2>
<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>
<div id="gtx-anchor" style="position: absolute; visibility: hidden; left: 25px; top: 1149.55px; width: 425.347px; height: 16.3636px;"></div>
<div aria-describedby="bubble-3" class="jfk-bubble gtx-bubble" role="alertdialog" style="visibility: visible; left: -29px; top: 1176px; opacity: 1;">
<div class="jfk-bubble-content-id" id="bubble-3">
<div id="gtx-host" style="min-width: 200px; max-width: 400px;"></div>
</div>
<div aria-label="Close" class="jfk-bubble-closebtn-id jfk-bubble-closebtn" role="button" tabindex="0"></div>
<div class="jfk-bubble-arrow-id jfk-bubble-arrow jfk-bubble-arrowup" style="left: 212.5px;">
<div class="jfk-bubble-arrowimplbefore"></div>
<div class="jfk-bubble-arrowimplafter"></div>
</div>
</div>