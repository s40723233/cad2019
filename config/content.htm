<h1>Home</h1>
<p><a href="https://s40723233.github.io/cad2019/content/week2~5.html">week2~5</a></p>
<p><a href="https://s40723233.github.io/cad2019/content/week6~9.html">week6~9</a></p>
<p><a href="https://s40723233.github.io/cad2019/content/week10~14.html">week10~14</a></p>
<p><a href="https://s40723233.github.io/cad2019/content/week15~18.html">week15~18</a></p>
<h1>Weeks</h1>
<h2>week 2~5</h2>
<p>建立自己的倉儲和cad2019網站</p>
<p><span>並下載子cmsimde建立新的網頁。</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yiq7M-uNuU4" width="560"></iframe></span></p>
<p>week 3</p>
<p>執行編譯 Solvespace</p>
<h4>編譯步驟:</h4>
<p>先將 Y:\portablegit\bin\sh.exe 改名為 sh_rename_for_solvespace.exe</p>
<p>git version 查驗 git 版本</p>
<p>git 2.13 版本以上, 可以使用下列 git clone <span>--recurse-submodules 取得所有子模組資料</span></p>
<p>git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace</p>
<p>edit Y:\tmp\solvespace\extlib\angle\CMakeLists.txt comment out line 713 and 714</p>
<p>#list(APPEND ANGLE_DEFINITIONS<br/>#"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }")<br/>endif()</p>
<p>需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中:</p>
<p>cd solvespace</p>
<p>cd extlib</p>
<p>cd libpng</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p>rename libpng.dll.a to libpng_static.a and copy to Y:\msys64\mingw64\lib</p>
<p>接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行:</p>
<p><span>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</span><br/><span>mingw32-make</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Rjy6DkNjKmM" width="560"></iframe></span></p>
<p></p>
<p><span></span></p>
<h5>week4</h5>
<p>完成WEEK3的倉儲設定以及網站。</p>
<h5>week5</h5>
<p>solvespace建立模型。</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1Ce2b3yKXD8" width="560"></iframe></p>
<p>自評成績，</p>
<p></p>
<h2>week 6~9</h2>
<p></p>
<h5>week 6</h5>
<p>建立汽車模型</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RfHPYscVAew" width="560"></iframe></p>
<p>使用v-rap控制模型</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WuxXDeClLB0" width="560"></iframe></p>
<h4>week7</h4>
<p>網際 V-rep 模型控制</p>
<ol>
<li>先到Task1裡，下載V-rep 3.6.1 rev 4.7z和 web_vrep2.zip。</li>
<li>將兩個檔案都解壓縮在自己的隨身碟tmp裡面。</li>
<li>打開自己的start_mdecourse，輸入regedit開啟程式。</li>
<li>將HKEY_CLASSES_ROOT內的，.py和.py_auto_le刪除。</li>
<li>開啟web_vrep2的app.py，點Tools的Go。</li>
<li>再點開剛剛載好的V-REP3\V-REP_PRO_EDU &gt; vrep.exe 。</li>
<li>開啟後將web_vrep2的two_wheeler.ttt拖移進去。</li>
<li>到http://127.0.0.1:5000/裡面，就可以操控了。</li>
</ol>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0Z_kFuPI0NY" width="560"></iframe></p>
<p>與互相評分。</p>
<p>新增啟動與停止按鈕</p>
<p>1.進入2b Task 1的 #14 ，準備操作。</p>
<p>2.開啟start_mdecoursr，進入web_vrep2。</p>
<p>3.編輯templates裡面的controls.html。</p>
<p>4.加入start 和 stop 的botton，直接複製改。</p>
<p>5.編輯vrep_linefollower.py，if加入判斷式。 if direction == 'start': vrep.simxStartSimulation(self.clientID, vrep.simx_opmode_oneshot) if direction == 'stop': vrep.simxStopSimulation(self.clientID, vrep.simx_opmode_oneshot)</p>
<p>6.補上else: ，完成後儲存，記得語法要排好。</p>
<p>7.開啟v-rep程式，將two_wheeler.ttt檔案拖入。</p>
<p>8.再開啟app.py 的go進入網址localhost:5000。</p>
<p>9.這樣子就可以進行start 以及 stop的操作了。</p>
<p></p>
<p>Solvespace 納入學號</p>
<p>1.先到自己tmp下的solvespace\build\src\CMakeFiles\solvespace.dir。</p>
<p>2.刪掉solvespace.cpp.obj檔案，開啟start_mdecourse。</p>
<p>3.再到solvespace\src找到solvespace.cpp用編輯器打開。</p>
<p>4.Ctrl+f 搜尋GPL，把Message下面的This is SolveSpace 。</p>
<p>5.改成This is SolveSpace is compiled by 40723210。</p>
<p>6.進入solvespace\build，輸入mingw32-make，等待完成。</p>
<p>7.開啟solvespace.exe，點help &gt; about 就完成了驗證。</p>
<h2>Week10~14</h2>
<p>各組開始協同倉儲</p>
<p>Batch Command設定</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qKlIqdLnLvk" width="560"></iframe></p>
<h2>Week15~18</h2>
<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>
<div id="gtx-anchor" style="position: absolute; visibility: hidden; left: 25px; top: 1149.55px; width: 425.347px; height: 16.3636px;"></div>
<div aria-describedby="bubble-3" class="jfk-bubble gtx-bubble" role="alertdialog" style="visibility: visible; left: -29px; top: 1176px; opacity: 1;">
<div class="jfk-bubble-content-id" id="bubble-3">
<div id="gtx-host" style="min-width: 200px; max-width: 400px;"></div>
</div>
<div aria-label="Close" class="jfk-bubble-closebtn-id jfk-bubble-closebtn" role="button" tabindex="0"></div>
<div class="jfk-bubble-arrow-id jfk-bubble-arrow jfk-bubble-arrowup" style="left: 212.5px;">
<div class="jfk-bubble-arrowimplbefore"></div>
<div class="jfk-bubble-arrowimplafter"></div>
</div>
</div>